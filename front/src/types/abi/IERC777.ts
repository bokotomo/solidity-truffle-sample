/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import type BN from "bn.js";
import type { ContractOptions } from "web3-eth-contract";
import type { EventLog } from "web3-core";
import type { EventEmitter } from "events";
import type {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

export interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type AuthorizedOperator = ContractEventLog<{
  operator: string;
  tokenHolder: string;
  0: string;
  1: string;
}>;
export type Burned = ContractEventLog<{
  operator: string;
  from: string;
  amount: string;
  data: string;
  operatorData: string;
  0: string;
  1: string;
  2: string;
  3: string;
  4: string;
}>;
export type Minted = ContractEventLog<{
  operator: string;
  to: string;
  amount: string;
  data: string;
  operatorData: string;
  0: string;
  1: string;
  2: string;
  3: string;
  4: string;
}>;
export type RevokedOperator = ContractEventLog<{
  operator: string;
  tokenHolder: string;
  0: string;
  1: string;
}>;
export type Sent = ContractEventLog<{
  operator: string;
  from: string;
  to: string;
  amount: string;
  data: string;
  operatorData: string;
  0: string;
  1: string;
  2: string;
  3: string;
  4: string;
  5: string;
}>;

export interface IERC777 extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): IERC777;
  clone(): IERC777;
  methods: {
    /**
     * Returns the name of the token.
     */
    name(): NonPayableTransactionObject<string>;

    /**
     * Returns the symbol of the token, usually a shorter version of the name.
     */
    symbol(): NonPayableTransactionObject<string>;

    /**
     * Returns the smallest part of the token that is not divisible. This means all token operations (creation, movement and destruction) must have amounts that are a multiple of this number. For most token contracts, this value will equal 1.
     */
    granularity(): NonPayableTransactionObject<string>;

    /**
     * Returns the amount of tokens in existence.
     */
    totalSupply(): NonPayableTransactionObject<string>;

    /**
     * Returns the amount of tokens owned by an account (`owner`).
     */
    balanceOf(owner: string): NonPayableTransactionObject<string>;

    /**
     * Moves `amount` tokens from the caller's account to `recipient`. If send or receive hooks are registered for the caller and `recipient`, the corresponding functions will be called with `data` and empty `operatorData`. See {IERC777Sender} and {IERC777Recipient}. Emits a {Sent} event. Requirements - the caller must have at least `amount` tokens. - `recipient` cannot be the zero address. - if `recipient` is a contract, it must implement the {IERC777Recipient} interface.
     */
    send(
      recipient: string,
      amount: number | string | BN,
      data: string | number[]
    ): NonPayableTransactionObject<void>;

    /**
     * Destroys `amount` tokens from the caller's account, reducing the total supply. If a send hook is registered for the caller, the corresponding function will be called with `data` and empty `operatorData`. See {IERC777Sender}. Emits a {Burned} event. Requirements - the caller must have at least `amount` tokens.
     */
    burn(
      amount: number | string | BN,
      data: string | number[]
    ): NonPayableTransactionObject<void>;

    /**
     * Returns true if an account is an operator of `tokenHolder`. Operators can send and burn tokens on behalf of their owners. All accounts are their own operator. See {operatorSend} and {operatorBurn}.
     */
    isOperatorFor(
      operator: string,
      tokenHolder: string
    ): NonPayableTransactionObject<boolean>;

    /**
     * Make an account an operator of the caller. See {isOperatorFor}. Emits an {AuthorizedOperator} event. Requirements - `operator` cannot be calling address.
     */
    authorizeOperator(operator: string): NonPayableTransactionObject<void>;

    /**
     * Revoke an account's operator status for the caller. See {isOperatorFor} and {defaultOperators}. Emits a {RevokedOperator} event. Requirements - `operator` cannot be calling address.
     */
    revokeOperator(operator: string): NonPayableTransactionObject<void>;

    /**
     * Returns the list of default operators. These accounts are operators for all token holders, even if {authorizeOperator} was never called on them. This list is immutable, but individual holders may revoke these via {revokeOperator}, in which case {isOperatorFor} will return false.
     */
    defaultOperators(): NonPayableTransactionObject<string[]>;

    /**
     * Moves `amount` tokens from `sender` to `recipient`. The caller must be an operator of `sender`. If send or receive hooks are registered for `sender` and `recipient`, the corresponding functions will be called with `data` and `operatorData`. See {IERC777Sender} and {IERC777Recipient}. Emits a {Sent} event. Requirements - `sender` cannot be the zero address. - `sender` must have at least `amount` tokens. - the caller must be an operator for `sender`. - `recipient` cannot be the zero address. - if `recipient` is a contract, it must implement the {IERC777Recipient} interface.
     */
    operatorSend(
      sender: string,
      recipient: string,
      amount: number | string | BN,
      data: string | number[],
      operatorData: string | number[]
    ): NonPayableTransactionObject<void>;

    /**
     * Destroys `amount` tokens from `account`, reducing the total supply. The caller must be an operator of `account`. If a send hook is registered for `account`, the corresponding function will be called with `data` and `operatorData`. See {IERC777Sender}. Emits a {Burned} event. Requirements - `account` cannot be the zero address. - `account` must have at least `amount` tokens. - the caller must be an operator for `account`.
     */
    operatorBurn(
      account: string,
      amount: number | string | BN,
      data: string | number[],
      operatorData: string | number[]
    ): NonPayableTransactionObject<void>;
  };
  events: {
    AuthorizedOperator(cb?: Callback<AuthorizedOperator>): EventEmitter;
    AuthorizedOperator(
      options?: EventOptions,
      cb?: Callback<AuthorizedOperator>
    ): EventEmitter;

    Burned(cb?: Callback<Burned>): EventEmitter;
    Burned(options?: EventOptions, cb?: Callback<Burned>): EventEmitter;

    Minted(cb?: Callback<Minted>): EventEmitter;
    Minted(options?: EventOptions, cb?: Callback<Minted>): EventEmitter;

    RevokedOperator(cb?: Callback<RevokedOperator>): EventEmitter;
    RevokedOperator(
      options?: EventOptions,
      cb?: Callback<RevokedOperator>
    ): EventEmitter;

    Sent(cb?: Callback<Sent>): EventEmitter;
    Sent(options?: EventOptions, cb?: Callback<Sent>): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "AuthorizedOperator", cb: Callback<AuthorizedOperator>): void;
  once(
    event: "AuthorizedOperator",
    options: EventOptions,
    cb: Callback<AuthorizedOperator>
  ): void;

  once(event: "Burned", cb: Callback<Burned>): void;
  once(event: "Burned", options: EventOptions, cb: Callback<Burned>): void;

  once(event: "Minted", cb: Callback<Minted>): void;
  once(event: "Minted", options: EventOptions, cb: Callback<Minted>): void;

  once(event: "RevokedOperator", cb: Callback<RevokedOperator>): void;
  once(
    event: "RevokedOperator",
    options: EventOptions,
    cb: Callback<RevokedOperator>
  ): void;

  once(event: "Sent", cb: Callback<Sent>): void;
  once(event: "Sent", options: EventOptions, cb: Callback<Sent>): void;
}

/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import type BN from "bn.js";
import type { ContractOptions } from "web3-eth-contract";
import type { EventLog } from "web3-core";
import type { EventEmitter } from "events";
import type {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

export interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type Approval = ContractEventLog<{
  owner: string;
  spender: string;
  value: string;
  0: string;
  1: string;
  2: string;
}>;
export type AuthorizedOperator = ContractEventLog<{
  operator: string;
  tokenHolder: string;
  0: string;
  1: string;
}>;
export type Burned = ContractEventLog<{
  operator: string;
  from: string;
  amount: string;
  data: string;
  operatorData: string;
  0: string;
  1: string;
  2: string;
  3: string;
  4: string;
}>;
export type Minted = ContractEventLog<{
  operator: string;
  to: string;
  amount: string;
  data: string;
  operatorData: string;
  0: string;
  1: string;
  2: string;
  3: string;
  4: string;
}>;
export type RevokedOperator = ContractEventLog<{
  operator: string;
  tokenHolder: string;
  0: string;
  1: string;
}>;
export type Sent = ContractEventLog<{
  operator: string;
  from: string;
  to: string;
  amount: string;
  data: string;
  operatorData: string;
  0: string;
  1: string;
  2: string;
  3: string;
  4: string;
  5: string;
}>;
export type Transfer = ContractEventLog<{
  from: string;
  to: string;
  value: string;
  0: string;
  1: string;
  2: string;
}>;

export interface MyTokenContract extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): MyTokenContract;
  clone(): MyTokenContract;
  methods: {
    /**
     * See {IERC20-allowance}. Note that operator and allowance concepts are orthogonal: operators may not have allowance, and accounts with allowance may not be operators themselves.
     */
    allowance(
      holder: string,
      spender: string
    ): NonPayableTransactionObject<string>;

    /**
     * See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Note that accounts cannot have allowance issued by their operators.
     */
    approve(
      spender: string,
      value: number | string | BN
    ): NonPayableTransactionObject<boolean>;

    /**
     * See {IERC777-authorizeOperator}.
     */
    authorizeOperator(operator: string): NonPayableTransactionObject<void>;

    /**
     * Returns the amount of tokens owned by an account (`tokenHolder`).
     */
    balanceOf(tokenHolder: string): NonPayableTransactionObject<string>;

    /**
     * See {IERC777-burn}. Also emits a {IERC20-Transfer} event for ERC20 compatibility.
     */
    burn(
      amount: number | string | BN,
      data: string | number[]
    ): NonPayableTransactionObject<void>;

    /**
     * See {ERC20-decimals}. Always returns 18, as per the [ERC777 EIP](https://eips.ethereum.org/EIPS/eip-777#backward-compatibility).
     */
    decimals(): NonPayableTransactionObject<string>;

    /**
     * See {IERC777-defaultOperators}.
     */
    defaultOperators(): NonPayableTransactionObject<string[]>;

    /**
     * See {IERC777-granularity}. This implementation always returns `1`.
     */
    granularity(): NonPayableTransactionObject<string>;

    /**
     * See {IERC777-isOperatorFor}.
     */
    isOperatorFor(
      operator: string,
      tokenHolder: string
    ): NonPayableTransactionObject<boolean>;

    /**
     * See {IERC777-name}.
     */
    name(): NonPayableTransactionObject<string>;

    /**
     * See {IERC777-operatorBurn}. Emits {Burned} and {IERC20-Transfer} events.
     */
    operatorBurn(
      account: string,
      amount: number | string | BN,
      data: string | number[],
      operatorData: string | number[]
    ): NonPayableTransactionObject<void>;

    /**
     * See {IERC777-operatorSend}. Emits {Sent} and {IERC20-Transfer} events.
     */
    operatorSend(
      sender: string,
      recipient: string,
      amount: number | string | BN,
      data: string | number[],
      operatorData: string | number[]
    ): NonPayableTransactionObject<void>;

    /**
     * See {IERC777-revokeOperator}.
     */
    revokeOperator(operator: string): NonPayableTransactionObject<void>;

    /**
     * See {IERC777-send}. Also emits a {IERC20-Transfer} event for ERC20 compatibility.
     */
    send(
      recipient: string,
      amount: number | string | BN,
      data: string | number[]
    ): NonPayableTransactionObject<void>;

    /**
     * See {IERC777-symbol}.
     */
    symbol(): NonPayableTransactionObject<string>;

    /**
     * See {IERC777-totalSupply}.
     */
    totalSupply(): NonPayableTransactionObject<string>;

    /**
     * See {IERC20-transfer}. Unlike `send`, `recipient` is _not_ required to implement the {IERC777Recipient} interface if it is a contract. Also emits a {Sent} event.
     */
    transfer(
      recipient: string,
      amount: number | string | BN
    ): NonPayableTransactionObject<boolean>;

    /**
     * See {IERC20-transferFrom}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Note that operator and allowance concepts are orthogonal: operators cannot call `transferFrom` (unless they have allowance), and accounts with allowance cannot call `operatorSend` (unless they are operators). Emits {Sent}, {IERC20-Transfer} and {IERC20-Approval} events.
     */
    transferFrom(
      holder: string,
      recipient: string,
      amount: number | string | BN
    ): NonPayableTransactionObject<boolean>;
  };
  events: {
    Approval(cb?: Callback<Approval>): EventEmitter;
    Approval(options?: EventOptions, cb?: Callback<Approval>): EventEmitter;

    AuthorizedOperator(cb?: Callback<AuthorizedOperator>): EventEmitter;
    AuthorizedOperator(
      options?: EventOptions,
      cb?: Callback<AuthorizedOperator>
    ): EventEmitter;

    Burned(cb?: Callback<Burned>): EventEmitter;
    Burned(options?: EventOptions, cb?: Callback<Burned>): EventEmitter;

    Minted(cb?: Callback<Minted>): EventEmitter;
    Minted(options?: EventOptions, cb?: Callback<Minted>): EventEmitter;

    RevokedOperator(cb?: Callback<RevokedOperator>): EventEmitter;
    RevokedOperator(
      options?: EventOptions,
      cb?: Callback<RevokedOperator>
    ): EventEmitter;

    Sent(cb?: Callback<Sent>): EventEmitter;
    Sent(options?: EventOptions, cb?: Callback<Sent>): EventEmitter;

    Transfer(cb?: Callback<Transfer>): EventEmitter;
    Transfer(options?: EventOptions, cb?: Callback<Transfer>): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "Approval", cb: Callback<Approval>): void;
  once(event: "Approval", options: EventOptions, cb: Callback<Approval>): void;

  once(event: "AuthorizedOperator", cb: Callback<AuthorizedOperator>): void;
  once(
    event: "AuthorizedOperator",
    options: EventOptions,
    cb: Callback<AuthorizedOperator>
  ): void;

  once(event: "Burned", cb: Callback<Burned>): void;
  once(event: "Burned", options: EventOptions, cb: Callback<Burned>): void;

  once(event: "Minted", cb: Callback<Minted>): void;
  once(event: "Minted", options: EventOptions, cb: Callback<Minted>): void;

  once(event: "RevokedOperator", cb: Callback<RevokedOperator>): void;
  once(
    event: "RevokedOperator",
    options: EventOptions,
    cb: Callback<RevokedOperator>
  ): void;

  once(event: "Sent", cb: Callback<Sent>): void;
  once(event: "Sent", options: EventOptions, cb: Callback<Sent>): void;

  once(event: "Transfer", cb: Callback<Transfer>): void;
  once(event: "Transfer", options: EventOptions, cb: Callback<Transfer>): void;
}

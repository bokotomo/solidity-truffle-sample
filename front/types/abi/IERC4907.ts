/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import type BN from "bn.js";
import type { ContractOptions } from "web3-eth-contract";
import type { EventLog } from "web3-core";
import type { EventEmitter } from "events";
import type {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

export interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type UpdateUser = ContractEventLog<{
  tokenId: string;
  user: string;
  expires: string;
  0: string;
  1: string;
  2: string;
}>;

export interface IERC4907 extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): IERC4907;
  clone(): IERC4907;
  methods: {
    /**
     * The zero address indicates there is no user Throws if `tokenId` is not valid NFT
     * set the user and expires of a NFT
     * @param expires UNIX timestamp, The new user could use the NFT before expires
     * @param user The new user of the NFT
     */
    setUser(
      tokenId: number | string | BN,
      user: string,
      expires: number | string | BN
    ): NonPayableTransactionObject<void>;

    /**
     * The zero address indicates that there is no user or the user is expired
     * Get the user address of an NFT
     * @param tokenId The NFT to get the user address for
     */
    userOf(tokenId: number | string | BN): NonPayableTransactionObject<string>;

    /**
     * The zero value indicates that there is no user
     * Get the user expires of an NFT
     * @param tokenId The NFT to get the user expires for
     */
    userExpires(
      tokenId: number | string | BN
    ): NonPayableTransactionObject<string>;
  };
  events: {
    UpdateUser(cb?: Callback<UpdateUser>): EventEmitter;
    UpdateUser(options?: EventOptions, cb?: Callback<UpdateUser>): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "UpdateUser", cb: Callback<UpdateUser>): void;
  once(
    event: "UpdateUser",
    options: EventOptions,
    cb: Callback<UpdateUser>
  ): void;
}
